import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import axios from 'axios';
import { mean, multiply, transpose, inv, ones, squeeze, subtract } from 'mathjs';

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const app = express();
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TELEGRAM_TOKEN;
const HOST_URL = process.env.HOST_URL;
const API_KEY = process.env.COINGECKO_API_KEY;

if (!TOKEN || !HOST_URL) {
  console.error('–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏ HOST_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${HOST_URL}/webhook/${TOKEN}`);

// --- API –∫–ª–∏–µ–Ω—Ç –¥–ª—è CoinGecko ---
const coinGeckoApi = axios.create({
  baseURL: 'https://api.coingecko.com/api/v3',
  headers: API_KEY ? { 'x-cg-demo-api-key': API_KEY } : {}
});

// --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –∏ —Ü–µ–Ω ---
let coinListCache = [];
const priceCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –¥–ª—è —Ü–µ–Ω

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
async function initializeCoinList() {
    try {
        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å CoinGecko...");
        const { data } = await coinGeckoApi.get('/coins/list');
        coinListCache = data;
        console.log(`–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Å–µ–≥–æ: ${coinListCache.length} –º–æ–Ω–µ—Ç.`);
    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ä—ã –≤ ID.", error.message);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    }
}

// --- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---

function convertTickersToIds(tickers) {
    const foundIds = [];
    const notFound = [];

    for (const ticker of tickers) {
        const lowerTicker = ticker.toLowerCase();
        let bestMatch = null;

        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const potentialMatches = coinListCache.filter(coin => coin.id === lowerTicker || coin.symbol === lowerTicker);

        if (potentialMatches.length > 0) {
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID, –∑–∞—Ç–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ
            bestMatch = potentialMatches.find(c => c.id === lowerTicker) || potentialMatches[0];
            foundIds.push(bestMatch.id);
        } else {
            notFound.push(ticker);
        }
    }

    if (notFound.length > 0) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤: ${notFound.join(', ')}`);
    }

    return foundIds;
}

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function fetchPrices(coinIds, days) {
  const prices = {};
  for (const id of coinIds) {
    const cacheKey = `${id}-${days}`;
    if (priceCache.has(cacheKey) && (Date.now() - priceCache.get(cacheKey).timestamp < CACHE_TTL)) {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à –¥–ª—è: ${id} –Ω–∞ ${days} –¥–Ω–µ–π`);
      prices[id] = priceCache.get(cacheKey).data;
      continue;
    }
    
    let retries = 0;
    const maxRetries = 3;
    let success = false;

    while (retries < maxRetries && !success) {
      try {
        const { data } = await coinGeckoApi.get(`/coins/${id}/market_chart?vs_currency=usd&days=${days}`);
        if (!data.prices || data.prices.length < 2) { // –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
          throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è ${id} –∑–∞ –ø–µ—Ä–∏–æ–¥ ${days} –¥–Ω–µ–π.`);
        }
        
        const priceData = data.prices.map(p => p[1]);
        prices[id] = priceData;
        priceCache.set(cacheKey, { data: priceData, timestamp: Date.now() });
        success = true;
      } catch (error) {
        if (error.response && error.response.status === 429) {
          retries++;
          const waitTime = Math.pow(2, retries) * 1000;
          console.warn(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –¥–ª—è ${id}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${waitTime / 1000}—Å...`);
          await delay(waitTime);
        } else {
          throw new Error(error.message || `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É —Å ID "${id}".`);
        }
      }
    }

    if (!success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${id} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
    }
  }
  return prices;
}

function computeReturns(prices) {
    const returns = [];
    const keys = Object.keys(prices);
    if (keys.length === 0) return [];

    let minLength = Infinity;
    for (const key of keys) {
        if (prices[key].length < minLength) {
            minLength = prices[key].length;
        }
    }

    if (minLength < 2) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.");
    }

    for (const key of keys) {
        if (prices[key].length > minLength) {
            console.warn(`–£—Å–µ–∫–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è ${key} –¥–æ ${minLength} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è`);
            prices[key] = prices[key].slice(prices[key].length - minLength);
        }
    }
    
    for (let i = 1; i < minLength; i++) {
        const row = keys.map(k => Math.log(prices[k][i] / prices[k][i - 1]));
        returns.push(row);
    }
    return returns;
}

function calculateCovarianceMatrix(data) {
    const meanReturns = mean(data, 0);
    const demeaned = data.map(row => subtract(row, meanReturns));
    const n = data.length;
    const matrix = multiply(transpose(demeaned), demeaned);
    return matrix.map(row => row.map(value => value / (n - 1)));
}

function optimizePortfolio(returns) {
    if (returns.length === 0) {
        throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.");
    }
    try {
        const avgReturns = mean(returns, 0);
        const covMatrix = calculateCovarianceMatrix(returns);
        const covInv = inv(covMatrix);
        const oneVec = ones([avgReturns.length, 1]);
        const top = multiply(covInv, oneVec);
        const bottom = multiply(transpose(oneVec), top);
        return squeeze(top).map(w => w / bottom);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è:", error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–Ω–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä –∏–ª–∏ –ø–µ—Ä–∏–æ–¥.");
    }
}

function formatWeights(coinIds, weights) {
    return coinIds.map((id, i) => `${id}: ${(weights[i] * 100).toFixed(2)}%`).join('\n');
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

bot.onText(/\/start/, msg => {
    bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–∏–∫–µ—Ä—ã –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
    \n<b>–ü—Ä–∏–º–µ—Ä:</b> <code>BTC, ETH, SOL</code>
    \n–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤ –¥–Ω—è—Ö, –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ "/".
    \n<b>–ü—Ä–∏–º–µ—Ä:</b> <code>BTC, ETH / 90</code>
    \n(–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30 –¥–Ω–µ–π)`, { parse_mode: 'HTML'});
});

bot.on('message', async msg => {
    if (msg.text.startsWith('/')) return;
    const chatId = msg.chat.id;
    const rawInput = msg.text.trim();
    
    // --- –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ ---
    let days = 30;
    let tickersString = rawInput;

    const periodMatch = rawInput.match(/\/\s*(\d+)\s*$/);
    if (periodMatch) {
        const parsedDays = parseInt(periodMatch[1], 10);
        if (!isNaN(parsedDays) && parsedDays >= 7 && parsedDays <= 365) {
            days = parsedDays;
            tickersString = rawInput.replace(/\/\s*(\d+)\s*$/, '').trim();
        } else {
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 7 –¥–æ 365 –¥–Ω–µ–π.");
        }
    }
    
    const tickers = tickersString.split(',').map(t => t.trim()).filter(t => t);
    if (tickers.length === 0) {
        return bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –º–æ–Ω–µ—Ç.");
    }

    const waitingMessage = await bot.sendMessage(chatId, `‚è≥ –ò—â—É –º–æ–Ω–µ—Ç—ã –ø–æ —Ç–∏–∫–µ—Ä–∞–º: ${tickers.join(', ')}...`);
    
    try {
        const coinIds = convertTickersToIds(tickers);
        await bot.editMessageText(`‚úÖ –ú–æ–Ω–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: <code>${coinIds.join(', ')}</code>\n\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∑–∞ ${days} –¥–Ω–µ–π –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å...`, {
            chat_id: chatId,
            message_id: waitingMessage.message_id,
            parse_mode: 'HTML'
        });

        const prices = await fetchPrices(coinIds, days);
        const returns = computeReturns(prices);
        const weights = optimizePortfolio(returns);
        const result = formatWeights(coinIds, weights);

        await bot.editMessageText(`üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, ${days} –¥–Ω–µ–π):\n\n<pre>${result}</pre>`, {
            chat_id: chatId,
            message_id: waitingMessage.message_id,
            parse_mode: 'HTML'
        });
    } catch (err) {
        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, {
            chat_id: chatId,
            message_id: waitingMessage.message_id
        });
    }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.use(express.json());
app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (_, res) => res.send('Telegram Bot is running.'));
app.listen(PORT, () => {
    console.log(`Express server is listening on port ${PORT}`);
    initializeCoinList(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
});
