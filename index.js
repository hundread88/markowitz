import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import axios from 'axios';
import { mean, multiply, transpose, inv, ones, squeeze, subtract } from 'mathjs';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TELEGRAM_TOKEN;
const HOST_URL = process.env.HOST_URL; 

if (!TOKEN || !HOST_URL) {
  console.error('–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏ HOST_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const WEBHOOK_PATH = `/webhook/${TOKEN}`;
const bot = new TelegramBot(TOKEN);

bot.setWebHook(`${HOST_URL}${WEBHOOK_PATH}`);

app.use(express.json());

app.post(WEBHOOK_PATH, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

async function fetchPrices(coinIds, days = 30) {
  const prices = {};
  for (let id of coinIds) {
    try {
      const url = `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=usd&days=${days}`;
      const { data } = await axios.get(url);
      if (!data.prices || data.prices.length === 0) {
          throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è ${id}`);
      }
      prices[id] = data.prices.map(p => p[1]);
    } catch (error) {
       console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${id}:`, error.message);
       throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É —Å ID "${id}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`);
    }
  }
  return prices;
}

function computeReturns(prices) {
  const returns = [];
  const keys = Object.keys(prices);
  const numPrices = prices[keys[0]].length;

  for (const key of keys) {
      if (prices[key].length !== numPrices) {
          throw new Error("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.");
      }
  }
  
  for (let i = 1; i < numPrices; i++) {
    const row = keys.map(k =>
      Math.log(prices[k][i] / prices[k][i - 1])
    );
    returns.push(row);
  }
  return returns;
}

function calculateCovarianceMatrix(data) {
  const meanReturns = mean(data, 0);
  const demeaned = data.map(row => subtract(row, meanReturns));
  const n = data.length;
  const matrix = multiply(transpose(demeaned), demeaned);
  return matrix.map(row => row.map(value => value / (n - 1)));
}

function optimizePortfolio(returns) {
  try {
    const avgReturns = mean(returns, 0);
    const covMatrix = calculateCovarianceMatrix(returns);
    const covInv = inv(covMatrix);
    const oneVec = ones([avgReturns.length, 1]);
    const top = multiply(covInv, oneVec);
    const bottom = multiply(transpose(oneVec), top); // bottom –∑–¥–µ—Å—å - —ç—Ç–æ —Å–∫–∞–ª—è—Ä (—á–∏—Å–ª–æ)
    
    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'bottom' –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –º–∞—Ç—Ä–∏—Ü–∞.
    const weights = squeeze(top).map(w => w / bottom);
    return weights;
  } catch(error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è:", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç –∏–ª–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä –º–æ–Ω–µ—Ç.");
  }
}

function formatWeights(coinIds, weights) {
  return coinIds.map((id, i) =>
    `${id}: ${(weights[i] * 100).toFixed(2)}%`
  ).join('\n');
}

bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ ID –º–æ–Ω–µ—Ç —Å CoinGecko —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: bitcoin,ethereum,solana), –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–ª—è –Ω–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º –ø–æ —Ç–µ–æ—Ä–∏–∏ –ú–∞—Ä–∫–æ–≤–∏—Ü–∞.`);
});

bot.on('message', async msg => {
  if (msg.text.startsWith('/')) return;

  const chatId = msg.chat.id;
  const input = msg.text.toLowerCase().replace(/\s/g, '');
  
  if (!input) {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –º–æ–Ω–µ—Ç.");
      return;
  }
  
  const coins = input.split(',');

  bot.sendMessage(chatId, `‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è: ${coins.join(', ')}...`);

  try {
    const prices = await fetchPrices(coins);
    const returns = computeReturns(prices);
    const weights = optimizePortfolio(returns);
    const result = formatWeights(coins, weights);
    bot.sendMessage(chatId, `üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫):\n\n${result}`);
  } catch (err) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

app.get('/', (_, res) => res.send('Telegram Bot is running.'));

app.listen(PORT, () => {
  console.log(`Express server is listening on port ${PORT}`);
});
