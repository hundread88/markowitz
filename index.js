import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import axios from 'axios';
import { mean, multiply, transpose, inv, ones, squeeze, subtract } from 'mathjs';

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const app = express();
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TELEGRAM_TOKEN;
const HOST_URL = process.env.HOST_URL;
const API_KEY = process.env.COINGECKO_API_KEY; // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è

if (!TOKEN || !HOST_URL) {
  console.error('–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏ HOST_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

if (API_KEY) {
    console.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω API –∫–ª—é—á CoinGecko. –ó–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å –Ω–∏–º.");
} else {
    console.warn("–í–Ω–∏–º–∞–Ω–∏–µ: API –∫–ª—é—á CoinGecko –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –∫–ª—é—á–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏.");
}

const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${HOST_URL}/webhook/${TOKEN}`);

app.use(express.json());
app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ---
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// --- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function fetchPrices(coinIds, days = 30) {
  const prices = {};
  const coinGeckoApi = axios.create({
    baseURL: 'https://api.coingecko.com/api/v3',
    headers: API_KEY ? { 'x-cg-demo-api-key': API_KEY } : {}
  });

  for (const id of coinIds) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cache.has(id) && (Date.now() - cache.get(id).timestamp < CACHE_TTL)) {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à –¥–ª—è: ${id}`);
      prices[id] = cache.get(id).data;
      continue;
    }
    
    let retries = 0;
    const maxRetries = 4;
    let success = false;

    while (retries < maxRetries && !success) {
      try {
        console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${id} (–ø–æ–ø—ã—Ç–∫–∞ ${retries + 1})`);
        const { data } = await coinGeckoApi.get(`/coins/${id}/market_chart?vs_currency=usd&days=${days}`);
        
        if (!data.prices || data.prices.length === 0) {
          throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è ${id}`);
        }
        
        const priceData = data.prices.map(p => p[1]);
        prices[id] = priceData;
        cache.set(id, { data: priceData, timestamp: Date.now() }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        success = true;

      } catch (error) {
        if (error.response && error.response.status === 429) {
          retries++;
          const waitTime = Math.pow(2, retries) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (2—Å, 4—Å, 8—Å...)
          console.warn(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API –¥–ª—è ${id}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${waitTime / 1000}—Å...`);
          await delay(waitTime);
        } else {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${id}:`, error.message);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É —Å ID "${id}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`);
        }
      }
    }

    if (!success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${id} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫. API CoinGecko –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.`);
    }
  }
  return prices;
}


function computeReturns(prices) {
    const returns = [];
    const keys = Object.keys(prices);
    if (keys.length === 0) return [];
    
    const numPrices = prices[keys[0]].length;
    for (const key of keys) {
        if (prices[key].length !== numPrices) {
            throw new Error("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ –º–æ–Ω–µ—Ç –Ω–µ–ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è.");
        }
    }
    for (let i = 1; i < numPrices; i++) {
        const row = keys.map(k => Math.log(prices[k][i] / prices[k][i - 1]));
        returns.push(row);
    }
    return returns;
}

function calculateCovarianceMatrix(data) {
    const meanReturns = mean(data, 0);
    const demeaned = data.map(row => subtract(row, meanReturns));
    const n = data.length;
    const matrix = multiply(transpose(demeaned), demeaned);
    return matrix.map(row => row.map(value => value / (n - 1)));
}

function optimizePortfolio(returns) {
    if (returns.length === 0) {
        throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.");
    }
    try {
        const avgReturns = mean(returns, 0);
        const covMatrix = calculateCovarianceMatrix(returns);
        const covInv = inv(covMatrix);
        const oneVec = ones([avgReturns.length, 1]);
        const top = multiply(covInv, oneVec);
        const bottom = multiply(transpose(oneVec), top);
        const weights = squeeze(top).map(w => w / bottom);
        return weights;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è:", error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç –∏–ª–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä –º–æ–Ω–µ—Ç.");
    }
}

function formatWeights(coinIds, weights) {
    return coinIds.map((id, i) => `${id}: ${(weights[i] * 100).toFixed(2)}%`).join('\n');
}

bot.onText(/\/start/, msg => {
    bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ ID –º–æ–Ω–µ—Ç —Å CoinGecko —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: bitcoin,ethereum,solana), –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–ª—è –Ω–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º –ø–æ —Ç–µ–æ—Ä–∏–∏ –ú–∞—Ä–∫–æ–≤–∏—Ü–∞.`);
});

bot.on('message', async msg => {
    if (msg.text.startsWith('/')) return;
    const chatId = msg.chat.id;
    const input = msg.text.toLowerCase().replace(/\s/g, '');
    if (!input) {
        return bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –º–æ–Ω–µ—Ç.");
    }
    const coins = input.split(',');
    const message = await bot.sendMessage(chatId, `‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è: ${coins.join(', ')}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.`);

    try {
        const prices = await fetchPrices(coins);
        const returns = computeReturns(prices);
        const weights = optimizePortfolio(returns);
        const result = formatWeights(coins, weights);
        bot.editMessageText(`üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫):\n\n${result}`, {
            chat_id: chatId,
            message_id: message.message_id
        });
    } catch (err) {
        bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, {
            chat_id: chatId,
            message_id: message.message_id
        });
    }
});

app.get('/', (_, res) => res.send('Telegram Bot is running.'));
app.listen(PORT, () => console.log(`Express server is listening on port ${PORT}`));
